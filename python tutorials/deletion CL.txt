class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class CircularLinkedList:
    def __init__(self):
        self.head = None
    
    def addLast(self, val):
        newNode = Node(val)

        if self.head == None:
            newNode.next = newNode
            self.head = newNode;
        else:
            last = self.head;

            while last.next != self.head:
                last = last.next;
            
            last.next = newNode;
            newNode.next = self.head

    def delete(self, key):

        if self.head == None:
            return

        if self.head.data == key and self.head.next == self.head:
            self.head = None
        elif self.head.data == key:
            lastNode = self.head
            
            while lastNode.next != self.head:
                lastNode = lastNode.next

            lastNode.next = self.head.next
            self.head = self.head.next
        else:
            current = self.head
            while current.next != self.head:
                if current.next.data == key:
                    current.next = current.next.next
                    break

                current = current.next
            
    def printList(self):
        temp = self.head
        
        while True:
            print(temp.data)
            temp = temp.next
            if temp == self.head:
                break


if __name__ == "__main__":

    llist = CircularLinkedList()

    llist.addLast(10)
    llist.addLast(20)
    llist.addLast(30)

    print("Circular Linked List: 10->20->30->10")

    print("Deleting Element: ",30)
    llist.delete(30)

    print("The LinkedList Elements Are [After Deletion]:")
    llist.printList()